# create a list and its functions
names = ["caleb", "joshua", "john", "cena", "eric"]
print(names)

# append method
names.append("rowan")
print(names)

# insert method
names.insert(2, "jerry")
print(names)

# index method
c = names.index("joshua")
print(c)

# count method
d = names.count("caleb")
print("the number of times caleb present is:" + str(d))

# sort method
names.sort()
print(names)

# reverse method
names.reverse()
print(names)

# pop method
names.pop(3)
print(names)

# remove method
names.remove("john")
print(names)

# clear method
names.clear()
print(names)

# dictonary
students = {
    "name": "caleb",
    "age": "20",
    "d.o.b": "2/7/2000",
    "hobby": "music"
}
print(students)

# get method
print(students.get("name"))

# to obtain all keys
print(students.keys())

# pops the last item in dictonary
students.popitem()
print(students)

# clears the entire student dictonary
students.clear()
print(students)

# SETS
# sets stores unique value
names = {"caleb", "kohli", "virat", "john", "cena", "daniel", "caleb", "john"}
print(names)

# removes a specified item
names.remove("cena")
print(names)

# adds a new item
names.add("batista")
print(names)

# pops out an item in the list
names.pop()
print(names)

# copies the set into a set
names1 = names.copy()
print(names1)

# removes common item in names
names2 = {"keran", "caleb", "bryan"}
a = names.symmetric_difference(names2)
print(a)

# performs union operation
b = names.union(names2)
print(b)

# returns true if both sets are diffrent or else returns false
c = names.isdisjoint(names2)
print(c)

# returns whether a set is subset of another set
names3 = {"caleb", "john"}
d = names3.issubset(names)
print(d)

# returns true is a set contain all the item of other set
e = names.issuperset(names3)
print(e)

# clears all items from set
print(names.clear())

# TUPLES
names = ("caleb", "joshua", "jerry", "ebi", "keran", "sharon")
print(names)

# count method is used to find how many times a item is present
a = names.count("caleb")
print(a)

# index method is used to find index of a particular item
b = names.index("jerry")
print(b)

# STRINGS
name = "caleb"
print(name)

# converts the first charecter yo upper case
print(name.capitalize())

# converts string into lower case
print(name.casefold())

# centers the string to a specified space
print(name.center(10))

# returns the number of times the string is used
print(name.count("caleb"))

# returns the encoded version of the string
print(name.encode())

# returns true if the string ends with the specified value
print(name.endswith(','))

# sets the tab size of the string
names1 = "h\te\tl"
print(names1.expandtabs(2))

# searches the specified value or charecter and returns its position
print(name.find("l"))

# formats specified value in a string
txt = "hello {fname}"
tx = txt.format(fname="caleb")
print(tx)

# returns true if all charecters in the string is alphanumeric
print(name.isalnum())

# returns true if all charecters in the string are alphabets
print(name.isalpha())

# returns true if all charecters in the string are decimal
print(name.isdecimal())

# returns true if all charecters in the string are digits
print(name.isdigit())

# returns true if the string is an identifier
print(name.isidentifier())

# returns true if all charecters in the string are lower case
print(name.islower())

# returns true if all charecters in the string is upper case
print(name.isupper())

# converts string into lower case
print(name.lower())

# joins a value to the  string
print("@".join(name))

# returns a string where a specified value is replaced with a specified value
print(name.replace("caleb", "joshua"))

# converts the string to upper case
print(name.upper())